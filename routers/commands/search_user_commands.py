from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import keyboards
import data_base.requests
import logic_search_users
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from aiogram.filters.state import StateFilter

from states import Form

router = Router()


@router.message(F.text == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", ~StateFilter(Form))
async def handle_user_search(message: Message, state: FSMContext):
    if not await data_base.requests.check_user_exists(message.from_user.id):
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return

    await message.answer("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –¥–∞–≤–∞–π –≤–∑–≥–ª—è–Ω–µ–º –Ω–∞ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É:", reply_markup=keyboards.start_search_user_keyboard)
    user = await data_base.requests.get_user_by_telegram_id(message.from_user.id)

    await logic_search_users.output_user(message, state, user)
    await state.set_state(Form.split_search_user_or_rewrite_data)


@router.message(Form.split_search_user_or_rewrite_data)
async def split_search_user_or_rewrite_data(message: Message, state: FSMContext):
    await state.update_data(split_search_user_or_rewrite_data=message.text)
    data = await state.get_data()

    if data["split_search_user_or_rewrite_data"] == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
        await state.set_state(Form.search_user)
        await search_user(message, state)
        return

    elif data["split_search_user_or_rewrite_data"] == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ":
        await state.set_state(Form.register_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è", reply_markup=ReplyKeyboardRemove())

    else:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")


@router.message(Form.search_user)
async def search_user(message: Message, state: FSMContext):
    await state.update_data(search_user=message.text)
    data = await state.get_data()

    if data["search_user"] == "üí§":
        await message.answer("–ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–æ–π", reply_markup=keyboards.start_main_keyboard)

    # –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞–≤—É –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª
    await message.answer(text="‚ú®üîç", reply_markup=keyboards.user_main_search_keyboard)

    user = await logic_search_users.search_and_output_random_user(message, state)

    if user is None:
        await message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞(")
        return

    if data["search_user"] == "ü§ç":
        print(1)
    elif data["search_user"] == "üëé":
        print(2)
    elif data["search_user"] == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
        pass
    else:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")